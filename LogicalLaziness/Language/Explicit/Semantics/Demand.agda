module LogicalLaziness.Language.Explicit.Semantics.Demand where

open import Function
open import Relation.Binary
open import Relation.Binary.Lattice
import Relation.Binary.Lattice.Properties.JoinSemilattice
open import Relation.Binary.PropositionalEquality
  as ‚â°
open import Algebra
open import Data.Bool
  hiding (_‚â§_)
open import Data.Product
  as √ó
open import Data.Product.Properties
open import Data.Nat
  as ‚Ñï
  hiding (_‚â§_; _‚äî_)
open import Data.Nat.Properties
  as ‚Ñï
open import Data.List
open import Data.List.Relation.Unary.All
  as All
import Data.List.Relation.Binary.Pointwise
  as List
open import Data.Product.Relation.Binary.Pointwise.NonDependent
  as √ó

open import LogicalLaziness.Base
open import LogicalLaziness.Base.Effect.Monad.Tick
import LogicalLaziness.Base.Data.Product.Relation.Binary.Pointwise
  as √ó
open import LogicalLaziness.Base.Data.List.All
open import LogicalLaziness.Base.Data.List.Membership.Propositional
open import LogicalLaziness.Base.Data.List.All.Relation.Binary.Pointwise
  as AllPointwise
  using ( []
        ; _‚à∑_
        )
  renaming (Pointwise to AllPointwise)
open import LogicalLaziness.Language.Explicit
open import LogicalLaziness.Language.Explicit.Semantics.Eval
  as ùîº
  hiding ( ‚ü¶_‚üß·µâ
         ; ‚ü¶if_,_‚üß·µâ
         ; ‚ü¶foldr_,_‚üß·µâ
         )

private
  variable
    Œì Œì‚ÇÅ Œì‚ÇÇ : Ctx
    Œ± Œ±‚ÇÅ Œ±‚ÇÇ : Ty
    Œ≥ : ùîº.‚ü¶ Œì ‚üß·∂ú
    Œ≥‚ÇÅ : ùîº.‚ü¶ Œì‚ÇÅ ‚üß·∂ú
    Œ≥‚ÇÇ : ùîº.‚ü¶ Œì‚ÇÇ ‚üß·∂ú

---------------------------------------------
-- The bounded join-semilattice of demands --
---------------------------------------------

-- `‚ü¶ Œ± ‚üß‚â∫·µâ v` describes the set of demands in `Œ±` that approximate the total
-- value `v`.
infix 4 ‚ü¶_‚üß‚â∫·µâ_
data ‚ü¶_‚üß‚â∫·µâ_ : (Œ± : Ty) ‚Üí ùîº.‚ü¶ Œ± ‚üß·µó ‚Üí Type where
  false     : ‚ü¶ `Bool ‚üß‚â∫·µâ false
  true      : ‚ü¶ `Bool ‚üß‚â∫·µâ true
  thunk     : {v : ùîº.‚ü¶ Œ±‚ÇÅ ‚üß·µó}
            ‚Üí ‚ü¶ Œ±‚ÇÅ ‚üß‚â∫·µâ v
            ‚Üí ‚ü¶ `T Œ±‚ÇÅ ‚üß‚â∫·µâ v
  undefined : {v : ùîº.‚ü¶ Œ±‚ÇÅ ‚üß·µó}
            ‚Üí ‚ü¶ `T Œ±‚ÇÅ ‚üß‚â∫·µâ v
  []        : ‚ü¶ `List Œ±‚ÇÅ ‚üß‚â∫·µâ []
  _‚à∑_       : {v : ùîº.‚ü¶ Œ±‚ÇÅ ‚üß·µó} {vs : List ùîº.‚ü¶ Œ±‚ÇÅ ‚üß·µó}
            ‚Üí ‚ü¶ `T Œ±‚ÇÅ ‚üß‚â∫·µâ v
            ‚Üí ‚ü¶ `T (`List Œ±‚ÇÅ) ‚üß‚â∫·µâ vs
            ‚Üí ‚ü¶ `List Œ±‚ÇÅ ‚üß‚â∫·µâ v ‚à∑ vs

-- Now we introduce a join-semilattice (‚â§, ‚äî, ‚ä•) of demands (on a fixed value).
-- We do not prove any properties yet.

infix 4 ‚ü¶_‚üß[_‚âª_‚â§·µâ_]
data ‚ü¶_‚üß[_‚âª_‚â§·µâ_] : (Œ± : Ty) (v : ùîº.‚ü¶ Œ± ‚üß·µó) ‚Üí ‚ü¶ Œ± ‚üß‚â∫·µâ v ‚Üí ‚ü¶ Œ± ‚üß‚â∫·µâ v ‚Üí Type where
  false     : ‚ü¶ `Bool ‚üß[ false ‚âª false ‚â§·µâ false ]
  true      : ‚ü¶ `Bool ‚üß[ true  ‚âª true  ‚â§·µâ true  ]
  undefined : ‚àÄ {v d}
            ‚Üí ‚ü¶ `T Œ±‚ÇÅ ‚üß[ v ‚âª undefined ‚â§·µâ d ]
  thunk     : ‚àÄ {v d‚ÇÅ d‚ÇÇ}
            ‚Üí ‚ü¶ Œ±‚ÇÅ ‚üß[ v ‚âª d‚ÇÅ ‚â§·µâ d‚ÇÇ ]
            ‚Üí ‚ü¶ `T Œ±‚ÇÅ ‚üß[ v ‚âª thunk d‚ÇÅ ‚â§·µâ thunk d‚ÇÇ ]
  []        : ‚ü¶ `List Œ±‚ÇÅ ‚üß[ [] ‚âª [] ‚â§·µâ [] ]
  _‚à∑_       : ‚àÄ {v‚ÇÅ v‚ÇÇ d‚ÇÅ‚ÇÅ d‚ÇÅ‚ÇÇ d‚ÇÇ‚ÇÅ d‚ÇÇ‚ÇÇ}
            ‚Üí ‚ü¶ `T Œ±‚ÇÅ ‚üß[ v‚ÇÅ ‚âª d‚ÇÅ‚ÇÅ ‚â§·µâ d‚ÇÅ‚ÇÇ ]
            ‚Üí ‚ü¶ `T (`List Œ±‚ÇÅ) ‚üß[ v‚ÇÇ ‚âª d‚ÇÇ‚ÇÅ ‚â§·µâ d‚ÇÇ‚ÇÇ ]
            ‚Üí ‚ü¶ `List Œ±‚ÇÅ ‚üß[ v‚ÇÅ ‚à∑ v‚ÇÇ ‚âª d‚ÇÅ‚ÇÅ ‚à∑ d‚ÇÇ‚ÇÅ ‚â§·µâ d‚ÇÅ‚ÇÇ ‚à∑ d‚ÇÇ‚ÇÇ ]

infix 4 _‚â§·µâ_
_‚â§·µâ_ : {Œ± : Ty} {v : ùîº.‚ü¶ Œ± ‚üß·µó} ‚Üí ‚ü¶ Œ± ‚üß‚â∫·µâ v ‚Üí ‚ü¶ Œ± ‚üß‚â∫·µâ v ‚Üí Type
_‚â§·µâ_ = ‚ü¶ _ ‚üß[ _ ‚âª_‚â§·µâ_]

-- `d‚ÇÅ ‚äî·µâ d‚ÇÇ` is the join of the demands `d‚ÇÅ` and `d‚ÇÇ`.
infixl 6 _‚äî·µâ_
_‚äî·µâ_ : {v : ùîº.‚ü¶ Œ± ‚üß·µó} ‚Üí ‚ü¶ Œ± ‚üß‚â∫·µâ v ‚Üí ‚ü¶ Œ± ‚üß‚â∫·µâ v ‚Üí ‚ü¶ Œ± ‚üß‚â∫·µâ v
false       ‚äî·µâ false       = false
true        ‚äî·µâ true        = true
thunk d‚ÇÅ    ‚äî·µâ thunk d‚ÇÇ    = thunk (d‚ÇÅ ‚äî·µâ d‚ÇÇ)
thunk d‚ÇÅ    ‚äî·µâ undefined   = thunk d‚ÇÅ
undefined   ‚äî·µâ thunk d‚ÇÇ    = thunk d‚ÇÇ
undefined   ‚äî·µâ undefined   = undefined
[]          ‚äî·µâ []          = []
(d‚ÇÅ‚ÇÅ ‚à∑ d‚ÇÅ‚ÇÇ) ‚äî·µâ (d‚ÇÇ‚ÇÅ ‚à∑ d‚ÇÇ‚ÇÇ) = d‚ÇÅ‚ÇÅ ‚äî·µâ d‚ÇÇ‚ÇÅ ‚à∑ d‚ÇÅ‚ÇÇ ‚äî·µâ d‚ÇÇ‚ÇÇ

-- `‚ä•‚ü¶ Œ± ‚üß‚â∫·µâ v` is the least demand in `Œ±` on the total value `v`.
infix 4 ‚ä•‚ü¶_‚üß‚â∫·µâ_
‚ä•‚ü¶_‚üß‚â∫·µâ_ : ‚àÄ Œ± (v : ùîº.‚ü¶ Œ± ‚üß·µó) ‚Üí ‚ü¶ Œ± ‚üß‚â∫·µâ v
‚ä•‚ü¶ `Bool   ‚üß‚â∫·µâ false   = false
‚ä•‚ü¶ `Bool   ‚üß‚â∫·µâ true    = true
‚ä•‚ü¶ `T _    ‚üß‚â∫·µâ _       = undefined
‚ä•‚ü¶ `List _ ‚üß‚â∫·µâ []      = []
‚ä•‚ü¶ `List _ ‚üß‚â∫·µâ (_ ‚à∑ _) = undefined ‚à∑ undefined

‚ä•·µâ : ‚àÄ {Œ±} {v : ùîº.‚ü¶ Œ± ‚üß·µó} ‚Üí ‚ü¶ Œ± ‚üß‚â∫·µâ v
‚ä•·µâ = ‚ä•‚ü¶ _ ‚üß‚â∫·µâ _

-----------------------------------------------------
-- The bounded join-semilattice of demand contexts --
-----------------------------------------------------

-- A demand context on an evaluation context `Œ≥` (itself over a typing context
-- `Œì`) assigns to each value `v` in `Œ≥` some demand on `v`.

infix 4 ‚ü¶_‚üß‚â∫·∂ú_
‚ü¶_‚üß‚â∫·∂ú_ : (Œì : Ctx) (Œ≥ : ùîº.‚ü¶ Œì ‚üß·∂ú) ‚Üí Type
‚ü¶ Œì ‚üß‚â∫·∂ú Œ≥ = All (uncurry ‚ü¶_‚üß‚â∫·µâ_) (All.toList Œ≥)

infix 4 ‚â∫·∂ú_
‚â∫·∂ú_ : ùîº.‚ü¶ Œì ‚üß·∂ú ‚Üí Type
‚â∫·∂ú Œ≥ = All (uncurry ‚ü¶_‚üß‚â∫·µâ_) (All.toList Œ≥)

private
  variable
    Œ¥ Œ¥‚ÇÅ Œ¥‚ÇÇ Œ¥‚ÇÉ : ‚â∫·∂ú Œ≥

-- The bounded join-semilattice of demands can be extended pointwise to a
-- bounded join-semilattice of demand contexts.

infix 4 ‚ü¶_‚üß[_‚âª_‚â§·∂ú_]
‚ü¶_‚üß[_‚âª_‚â§·∂ú_] : (Œì : Ctx) (Œ≥ : ùîº.‚ü¶ Œì ‚üß·∂ú) ‚Üí ‚â∫·∂ú Œ≥ ‚Üí ‚â∫·∂ú Œ≥ ‚Üí Type
‚ü¶ Œì ‚üß[ Œ≥ ‚âª Œ¥‚ÇÅ ‚â§·∂ú Œ¥‚ÇÇ ] = AllPointwise _‚â§·µâ_ Œ¥‚ÇÅ Œ¥‚ÇÇ

infix 4 _‚â§·∂ú_
_‚â§·∂ú_ : ‚â∫·∂ú Œ≥ ‚Üí ‚â∫·∂ú Œ≥ ‚Üí Type
Œ¥‚ÇÅ ‚â§·∂ú Œ¥‚ÇÇ = ‚ü¶ _ ‚üß[ _ ‚âª Œ¥‚ÇÅ ‚â§·∂ú Œ¥‚ÇÇ ]

infixl 6 _‚äî·∂ú_
_‚äî·∂ú_ : ‚â∫·∂ú Œ≥ ‚Üí ‚â∫·∂ú Œ≥ ‚Üí ‚â∫·∂ú Œ≥
Œ¥‚ÇÅ ‚äî·∂ú Œ¥‚ÇÇ = All.zipWith (uncurry _‚äî·µâ_) (Œ¥‚ÇÅ , Œ¥‚ÇÇ)

-- `‚ä•‚ü¶ Œì ‚üß‚â∫·∂ú Œ≥` is the least demand context of shape `Œì` on the evaluation
-- context `Œ≥`.
infix 4 ‚ä•‚ü¶_‚üß‚â∫·∂ú_
‚ä•‚ü¶_‚üß‚â∫·∂ú_ : (Œì : Ctx) (Œ≥ : ùîº.‚ü¶ Œì ‚üß·∂ú) ‚Üí ‚ü¶ Œì ‚üß‚â∫·∂ú Œ≥
‚ä•‚ü¶ Œì ‚üß‚â∫·∂ú Œ≥ = All.universal (Œª _ ‚Üí ‚ä•·µâ) (All.toList Œ≥)

‚ä•·∂ú : ‚â∫·∂ú Œ≥
‚ä•·∂ú = ‚ä•‚ü¶ _ ‚üß‚â∫·∂ú _

---------------------------------------------------------
-- The bounded join-semilattice of contexts with costs --
---------------------------------------------------------

infix 4 ‚ü¶_‚üß‚â∫·µê_
‚ü¶_‚üß‚â∫·µê_ : (Œì : Ctx) ‚Üí ùîº.‚ü¶ Œì ‚üß·∂ú ‚Üí Type
‚ü¶ Œì ‚üß‚â∫·µê Œ≥ = Tick (‚ü¶ Œì ‚üß‚â∫·∂ú Œ≥)

infix 4 ‚â∫·µê_
‚â∫·µê_ : ùîº.‚ü¶ Œì ‚üß·∂ú ‚Üí Type
‚â∫·µê Œ≥ = ‚ü¶ _ ‚üß‚â∫·µê Œ≥

infix 4 ‚ü¶_‚üß[_‚âª_‚â§·µê_]
‚ü¶_‚üß[_‚âª_‚â§·µê_] : (Œì : Ctx) (Œ≥ : ùîº.‚ü¶ Œì ‚üß·∂ú) ‚Üí ‚ü¶ Œì ‚üß‚â∫·µê Œ≥ ‚Üí ‚ü¶ Œì ‚üß‚â∫·µê Œ≥ ‚Üí Type
‚ü¶ Œì ‚üß[ Œ≥ ‚âª m‚ÇÅ ‚â§·µê m‚ÇÇ ] = Pointwise _‚â§·∂ú_ ‚Ñï._‚â§_ m‚ÇÅ m‚ÇÇ

infix 4 _‚â§·µê_
_‚â§·µê_ : ‚â∫·µê Œ≥ ‚Üí ‚â∫·µê Œ≥ ‚Üí Type
_‚â§·µê_ = ‚ü¶ _ ‚üß[ _ ‚âª_‚â§·µê_]

infixl 6 _‚äî·µê_
_‚äî·µê_ : ‚â∫·µê Œ≥ ‚Üí ‚â∫·µê Œ≥ ‚Üí ‚â∫·µê Œ≥
_‚äî·µê_ = √ó.zip _‚äî·∂ú_ _+_

infix 4 ‚ä•‚ü¶_‚üß‚â∫·µê_
‚ä•‚ü¶_‚üß‚â∫·µê_ : ‚àÄ Œì (Œ≥ : ùîº.‚ü¶ Œì ‚üß·∂ú) ‚Üí ‚ü¶ Œì ‚üß‚â∫·µê Œ≥
‚ä•‚ü¶ Œì ‚üß‚â∫·µê Œ≥ = return (‚ä•‚ü¶ Œì ‚üß‚â∫·∂ú Œ≥)

‚ä•·µê : ‚â∫·µê Œ≥
‚ä•·µê = ‚ä•‚ü¶ _ ‚üß‚â∫·µê _

----------------------
-- Demand semantics --
----------------------

‚ü¶_‚üß·µâ :
  (t : Œì ‚ä¢ Œ±)
  (Œ≥ : ùîº.‚ü¶ Œì ‚üß·∂ú) ‚Üí
  ‚ü¶ Œ± ‚üß‚â∫·µâ ùîº.‚ü¶ t ‚üß·µâ Œ≥ ‚Üí
  ‚ü¶ Œì ‚üß‚â∫·µê Œ≥

‚ü¶foldr_,_‚üß·µâ :
  (t‚ÇÅ : Œì ‚∏¥ `T Œ±‚ÇÅ ‚∏¥ `T Œ±‚ÇÇ ‚ä¢ Œ±‚ÇÇ) ‚Üí
  (t‚ÇÇ : Œì ‚ä¢ Œ±‚ÇÇ) ‚Üí
  (Œ≥ : ùîº.‚ü¶ Œì ‚üß·∂ú) ‚Üí
  (vs : List ùîº.‚ü¶ Œ±‚ÇÅ ‚üß·µó) ‚Üí
  ‚ü¶ Œ±‚ÇÇ ‚üß‚â∫·µâ ùîº.‚ü¶foldr t‚ÇÅ , t‚ÇÇ ‚üß·µâ Œ≥ vs ‚Üí
  ‚ü¶ Œì ‚∏¥ `List Œ±‚ÇÅ ‚üß‚â∫·µê (Œ≥ ‚∏¥ vs)

‚ü¶let-step‚ÇÅ_,_‚üß·µâ : (t‚ÇÅ : Œì ‚ä¢ Œ±‚ÇÅ)
             (t‚ÇÇ : Œì ‚∏¥ Œ±‚ÇÅ ‚ä¢ Œ±‚ÇÇ)
             (Œ≥ : ùîº.‚ü¶ Œì ‚üß·∂ú)
           ‚Üí ‚ü¶ Œ±‚ÇÇ ‚üß‚â∫·µâ ùîº.‚ü¶ `let t‚ÇÅ `in t‚ÇÇ ‚üß·µâ Œ≥
           ‚Üí ‚ü¶ Œì ‚üß‚â∫·µê Œ≥

‚ü¶if-step‚ÇÅ_,_,_‚üß·µâ : (t‚ÇÅ : Œì ‚ä¢ `Bool)
              (t‚ÇÇ t‚ÇÉ : Œì ‚ä¢ Œ±)
              (Œ≥ : ùîº.‚ü¶ Œì ‚üß·∂ú)
            ‚Üí ‚ü¶ Œ± ‚üß‚â∫·µâ ùîº.‚ü¶ `if t‚ÇÅ `then t‚ÇÇ `else t‚ÇÉ ‚üß·µâ Œ≥
            ‚Üí ‚ü¶ Œì ‚üß‚â∫·µê Œ≥

‚ü¶foldr-step‚ÇÅ_,_,_‚üß·µâ : (t‚ÇÅ : Œì ‚∏¥ `T Œ±‚ÇÅ ‚∏¥ `T Œ±‚ÇÇ ‚ä¢ Œ±‚ÇÇ)
                 (t‚ÇÇ : Œì ‚ä¢ Œ±‚ÇÇ)
                 (t‚ÇÉ : Œì ‚ä¢ `List Œ±‚ÇÅ)
                 (Œ≥ : ùîº.‚ü¶ Œì ‚üß·∂ú)
               ‚Üí ‚ü¶ Œ±‚ÇÇ ‚üß‚â∫·µâ ùîº.‚ü¶ `foldr t‚ÇÅ t‚ÇÇ t‚ÇÉ ‚üß·µâ Œ≥
               ‚Üí ‚ü¶ Œì ‚üß‚â∫·µê Œ≥

‚ü¶ ` x                      ‚üß·µâ Œ≥ d         = return (‚ä•·∂ú [ ‚àà·¥∏‚áílookup‚àà·¥∏toList x ]‚âî d)
‚ü¶ `let t‚ÇÅ `in t‚ÇÇ           ‚üß·µâ Œ≥ d‚ÇÇ        =
  ‚ü¶let-step‚ÇÅ t‚ÇÅ , t‚ÇÇ ‚üß·µâ Œ≥ d‚ÇÇ
‚ü¶ `false                   ‚üß·µâ Œ≥ d         = ‚ä•·µê
‚ü¶ `true                    ‚üß·µâ Œ≥ d         = ‚ä•·µê
‚ü¶ `if t‚ÇÅ `then t‚ÇÇ `else t‚ÇÉ ‚üß·µâ Œ≥ d‚ÇÇ‚ÇÉ       =
  ‚ü¶if-step‚ÇÅ t‚ÇÅ , t‚ÇÇ , t‚ÇÉ ‚üß·µâ Œ≥ d‚ÇÇ‚ÇÉ
‚ü¶ `[]                      ‚üß·µâ Œ≥ d         = ‚ä•·µê
‚ü¶ t‚ÇÅ `‚à∑ t‚ÇÇ                 ‚üß·µâ Œ≥ (d‚ÇÅ ‚à∑ d‚ÇÇ) = ‚ü¶ t‚ÇÅ ‚üß·µâ Œ≥ d‚ÇÅ ‚äî·µê ‚ü¶ t‚ÇÇ ‚üß·µâ Œ≥ d‚ÇÇ
‚ü¶ `foldr t‚ÇÅ t‚ÇÇ t‚ÇÉ          ‚üß·µâ Œ≥ d‚ÇÅ‚ÇÇ       =
  ‚ü¶foldr-step‚ÇÅ t‚ÇÅ , t‚ÇÇ , t‚ÇÉ ‚üß·µâ Œ≥ d‚ÇÅ‚ÇÇ
‚ü¶ `tick t                  ‚üß·µâ Œ≥ d         = do
  tick
  ‚ü¶ t ‚üß·µâ Œ≥ d
‚ü¶ `lazy t                  ‚üß·µâ Œ≥ (thunk d) = ‚ü¶ t ‚üß·µâ Œ≥ d
‚ü¶ `lazy t‚ÇÅ                 ‚üß·µâ Œ≥ undefined = ‚ä•·µê
‚ü¶ `force t‚ÇÅ                ‚üß·µâ Œ≥ d         = ‚ü¶ t‚ÇÅ ‚üß·µâ Œ≥ (thunk d)

‚ü¶if_,_‚üß·µâ :
  (t‚ÇÇ t‚ÇÉ : Œì ‚ä¢ Œ±)
  (Œ≥ : ùîº.‚ü¶ Œì ‚üß·∂ú)
  (v : Bool) ‚Üí
  ‚ü¶ Œ± ‚üß‚â∫·µâ ùîº.‚ü¶if t‚ÇÇ , t‚ÇÉ ‚üß·µâ Œ≥ v ‚Üí
  ‚ü¶ Œì ‚∏¥ `Bool ‚üß‚â∫·µê (Œ≥ ‚∏¥ v)

‚ü¶let-step‚ÇÇ_‚üß·µâ : (t‚ÇÅ : Œì ‚ä¢ Œ±‚ÇÅ)
           (Œ≥ : ùîº.‚ü¶ Œì ‚üß·∂ú)
         ‚Üí ‚ü¶ Œì ‚∏¥ Œ±‚ÇÅ ‚üß‚â∫·∂ú (Œ≥ ‚∏¥ ùîº.‚ü¶ t‚ÇÅ ‚üß·µâ Œ≥)
         ‚Üí ‚ü¶ Œì ‚üß‚â∫·µê Œ≥

‚ü¶let-step‚ÇÅ t‚ÇÅ , t‚ÇÇ ‚üß·µâ Œ≥ d‚ÇÇ = do
  Œ¥  ‚Üê ‚ü¶ t‚ÇÇ ‚üß·µâ (Œ≥ ‚∏¥ ùîº.‚ü¶ t‚ÇÅ ‚üß·µâ Œ≥) d‚ÇÇ
  ‚ü¶let-step‚ÇÇ t‚ÇÅ ‚üß·µâ Œ≥ Œ¥
‚ü¶let-step‚ÇÇ t‚ÇÅ ‚üß·µâ Œ≥ (Œ¥‚ÇÅ ‚∏¥ d‚ÇÅ) = do
  Œ¥‚ÇÇ ‚Üê ‚ü¶ t‚ÇÅ ‚üß·µâ Œ≥ d‚ÇÅ
  return (Œ¥‚ÇÅ ‚äî·∂ú Œ¥‚ÇÇ)

‚ü¶if-step‚ÇÇ_‚üß·µâ : (t‚ÇÅ : Œì ‚ä¢ `Bool)
          (Œ≥ : ùîº.‚ü¶ Œì ‚üß·∂ú)
        ‚Üí ‚ü¶ Œì ‚∏¥ `Bool ‚üß‚â∫·∂ú (Œ≥ ‚∏¥ ùîº.‚ü¶ t‚ÇÅ ‚üß·µâ Œ≥)
        ‚Üí ‚ü¶ Œì ‚üß‚â∫·µê Œ≥

‚ü¶if-step‚ÇÅ t‚ÇÅ , t‚ÇÇ , t‚ÇÉ ‚üß·µâ Œ≥ d‚ÇÇ‚ÇÉ = do
  Œ¥  ‚Üê ‚ü¶if t‚ÇÇ , t‚ÇÉ ‚üß·µâ Œ≥ (ùîº.‚ü¶ t‚ÇÅ ‚üß·µâ Œ≥) d‚ÇÇ‚ÇÉ
  ‚ü¶if-step‚ÇÇ t‚ÇÅ ‚üß·µâ Œ≥ Œ¥
‚ü¶if-step‚ÇÇ t‚ÇÅ ‚üß·µâ Œ≥ (Œ¥‚ÇÅ ‚∏¥ d‚ÇÅ) = do
  Œ¥‚ÇÇ ‚Üê ‚ü¶ t‚ÇÅ ‚üß·µâ Œ≥ d‚ÇÅ
  return (Œ¥‚ÇÅ ‚äî·∂ú Œ¥‚ÇÇ)

‚ü¶foldr-step‚ÇÇ_‚üß·µâ : (t‚ÇÉ : Œì ‚ä¢ `List Œ±‚ÇÅ)
                  (Œ≥ : ùîº.‚ü¶ Œì ‚üß·∂ú)
                ‚Üí ‚ü¶ Œì ‚∏¥ `List Œ±‚ÇÅ ‚üß‚â∫·∂ú (Œ≥ ‚∏¥ ùîº.‚ü¶ t‚ÇÉ ‚üß·µâ Œ≥)
                ‚Üí ‚ü¶ Œì ‚üß‚â∫·µê Œ≥

‚ü¶foldr-step‚ÇÅ t‚ÇÅ , t‚ÇÇ , t‚ÇÉ ‚üß·µâ Œ≥ d‚ÇÅ‚ÇÇ = do
  Œ¥  ‚Üê ‚ü¶foldr t‚ÇÅ , t‚ÇÇ ‚üß·µâ Œ≥ (ùîº.‚ü¶ t‚ÇÉ ‚üß·µâ Œ≥) d‚ÇÅ‚ÇÇ
  ‚ü¶foldr-step‚ÇÇ t‚ÇÉ ‚üß·µâ Œ≥ Œ¥
‚ü¶foldr-step‚ÇÇ t‚ÇÉ ‚üß·µâ Œ≥ (Œ¥‚ÇÅ ‚∏¥ d‚ÇÉ) = do
  Œ¥‚ÇÇ ‚Üê ‚ü¶ t‚ÇÉ ‚üß·µâ Œ≥ d‚ÇÉ
  return (Œ¥‚ÇÅ ‚äî·∂ú Œ¥‚ÇÇ)

‚ü¶if t‚ÇÇ , t‚ÇÉ ‚üß·µâ Œ≥ false d = do
  Œ¥ ‚Üê ‚ü¶ t‚ÇÉ ‚üß·µâ Œ≥ d
  return (Œ¥ ‚∏¥ false)
‚ü¶if t‚ÇÇ , t‚ÇÉ ‚üß·µâ Œ≥ true  d = do
  Œ¥ ‚Üê ‚ü¶ t‚ÇÇ ‚üß·µâ Œ≥ d
  return (Œ¥ ‚∏¥ true)

‚ü¶foldr‚ÇÇ‚ÇÇ_,_‚üß·µâ : (t‚ÇÅ : Œì ‚∏¥ `T Œ±‚ÇÅ ‚∏¥ `T Œ±‚ÇÇ ‚ä¢ Œ±‚ÇÇ)
                (t‚ÇÇ : Œì ‚ä¢ Œ±‚ÇÇ)
                (Œ≥ : ùîº.‚ü¶ Œì ‚üß·∂ú)
                (v : ùîº.‚ü¶ Œ±‚ÇÅ ‚üß·µó)
                (vs : ùîº.‚ü¶ `List Œ±‚ÇÅ ‚üß·µó)
              ‚Üí ‚ü¶ Œì ‚∏¥ `T Œ±‚ÇÅ ‚∏¥ `T Œ±‚ÇÇ ‚üß‚â∫·∂ú (Œ≥ ‚∏¥ v ‚∏¥ ùîº.‚ü¶foldr t‚ÇÅ , t‚ÇÇ ‚üß·µâ Œ≥ vs)
              ‚Üí ‚ü¶ Œì ‚∏¥ `List Œ±‚ÇÅ ‚üß‚â∫·µê (Œ≥ ‚∏¥ (v ‚à∑ vs))
‚ü¶foldr‚ÇÇ‚ÇÉ‚üß·µâ : (Œ≥ : ùîº.‚ü¶ Œì ‚üß·∂ú)
             (v : ùîº.‚ü¶ Œ±‚ÇÅ ‚üß·µó)
             (vs : List ùîº.‚ü¶ Œ±‚ÇÅ ‚üß·µó)
           ‚Üí ‚ü¶ Œì ‚üß‚â∫·∂ú Œ≥
           ‚Üí ‚ü¶ `T Œ±‚ÇÅ ‚üß‚â∫·µâ v
           ‚Üí ‚ü¶ Œì ‚∏¥ `T (`List Œ±‚ÇÅ) ‚üß‚â∫·∂ú (Œ≥ ‚∏¥ vs)
           ‚Üí ‚ü¶ Œì ‚∏¥ `List Œ±‚ÇÅ ‚üß‚â∫·µê (Œ≥ ‚∏¥ (v ‚à∑ vs))

‚ü¶foldr‚Ä≤_,_‚üß·µâ : (t‚ÇÅ : Œì ‚∏¥ `T Œ±‚ÇÅ ‚∏¥ `T Œ±‚ÇÇ ‚ä¢ Œ±‚ÇÇ)
               (t‚ÇÇ : Œì ‚ä¢ Œ±‚ÇÇ)
               (Œ≥ : ùîº.‚ü¶ Œì ‚üß·∂ú)
               (vs : List ùîº.‚ü¶ Œ±‚ÇÅ ‚üß·µó)
             ‚Üí ‚ü¶ `T Œ±‚ÇÇ ‚üß‚â∫·µâ ùîº.‚ü¶foldr t‚ÇÅ , t‚ÇÇ ‚üß·µâ Œ≥ vs
             ‚Üí ‚ü¶ Œì ‚∏¥ `T (`List Œ±‚ÇÅ) ‚üß‚â∫·µê (Œ≥ ‚∏¥ vs)

‚ü¶foldr t‚ÇÅ , t‚ÇÇ ‚üß·µâ Œ≥ []       d‚ÇÅ = do
  Œ¥ ‚Üê ‚ü¶ t‚ÇÇ ‚üß·µâ Œ≥ d‚ÇÅ
  return (Œ¥ ‚∏¥ [])
‚ü¶foldr t‚ÇÅ , t‚ÇÇ ‚üß·µâ Œ≥ (v ‚à∑ vs) d‚ÇÅ = do
  Œ¥ ‚Üê ‚ü¶ t‚ÇÅ ‚üß·µâ (Œ≥ ‚∏¥ v ‚∏¥ ùîº.‚ü¶foldr t‚ÇÅ , t‚ÇÇ ‚üß·µâ Œ≥ vs) d‚ÇÅ
  ‚ü¶foldr‚ÇÇ‚ÇÇ t‚ÇÅ , t‚ÇÇ ‚üß·µâ Œ≥ v vs Œ¥
‚ü¶foldr‚ÇÇ‚ÇÇ t‚ÇÅ , t‚ÇÇ ‚üß·µâ Œ≥ v vs (Œ¥‚ÇÅ ‚∏¥ d‚ÇÇ ‚∏¥ d‚ÇÉ) = do
  Œ¥ ‚Üê ‚ü¶foldr‚Ä≤ t‚ÇÅ , t‚ÇÇ ‚üß·µâ Œ≥ vs d‚ÇÉ
  ‚ü¶foldr‚ÇÇ‚ÇÉ‚üß·µâ Œ≥ v vs Œ¥‚ÇÅ d‚ÇÇ Œ¥
‚ü¶foldr‚ÇÇ‚ÇÉ‚üß·µâ Œ≥ v vs Œ¥‚ÇÅ d‚ÇÇ (Œ¥‚ÇÇ ‚∏¥ d‚ÇÑ) =
  return (Œ¥‚ÇÅ ‚äî·∂ú Œ¥‚ÇÇ ‚∏¥ (d‚ÇÇ ‚à∑ d‚ÇÑ))

‚ü¶foldr‚Ä≤‚ÇÇ‚ÇÇ‚üß : (Œ≥ : ùîº.‚ü¶ Œì ‚üß·∂ú)
             (vs : List ùîº.‚ü¶ Œ±‚ÇÅ ‚üß·µó)
           ‚Üí ‚ü¶ Œì ‚∏¥ `List Œ±‚ÇÅ ‚üß‚â∫·∂ú (Œ≥ ‚∏¥ vs)
           ‚Üí ‚ü¶ Œì ‚∏¥ `T (`List Œ±‚ÇÅ) ‚üß‚â∫·µê (Œ≥ ‚∏¥ vs)

‚ü¶foldr‚Ä≤ t‚ÇÅ , t‚ÇÇ ‚üß·µâ Œ≥ vs undefined  = ‚ä•·µê
‚ü¶foldr‚Ä≤ t‚ÇÅ , t‚ÇÇ ‚üß·µâ Œ≥ vs (thunk d‚ÇÅ) = do
  Œ¥ ‚Üê ‚ü¶foldr t‚ÇÅ , t‚ÇÇ ‚üß·µâ Œ≥ vs d‚ÇÅ
  ‚ü¶foldr‚Ä≤‚ÇÇ‚ÇÇ‚üß Œ≥ vs Œ¥
‚ü¶foldr‚Ä≤‚ÇÇ‚ÇÇ‚üß Œ≥ vs (Œ¥ ‚∏¥ d‚ÇÇ) =
  return (Œ¥ ‚∏¥ thunk d‚ÇÇ)

-------------------------------------------------------------------
-- Proof that (‚â§, ‚äî, ‚ä•) is a bounded join-semilattice on demands --
-------------------------------------------------------------------

‚â§·µâ-refl : ‚àÄ {v} ‚Üí Reflexive ‚ü¶ Œ± ‚üß[ v ‚âª_‚â§·µâ_]
‚â§·µâ-refl  {`Bool   } {x = false    } = false
‚â§·µâ-refl  {`Bool   } {x = true     } = true
‚â§·µâ-refl  {`T Œ±    } {x = thunk d‚ÇÅ } = thunk ‚â§·µâ-refl
‚â§·µâ-refl  {`T Œ±    } {x = undefined} = undefined
‚â§·µâ-refl  {`List Œ± } {x = []       } = []
‚â§·µâ-refl  {`List Œ± } {x = d‚ÇÅ ‚à∑ d‚ÇÇ  } = ‚â§·µâ-refl ‚à∑ ‚â§·µâ-refl

‚â§·µâ-trans : ‚àÄ {v} ‚Üí Transitive ‚ü¶ Œ± ‚üß[ v ‚âª_‚â§·µâ_]
‚â§·µâ-trans false           false           = false
‚â§·µâ-trans true            true            = true
‚â§·µâ-trans undefined       undefined       = undefined
‚â§·µâ-trans undefined       (thunk d‚ÇÇ‚â§d‚ÇÉ)   = undefined
‚â§·µâ-trans (thunk d‚ÇÅ‚â§d‚ÇÇ)   (thunk d‚ÇÇ‚â§d‚ÇÉ)   = thunk (‚â§·µâ-trans d‚ÇÅ‚â§d‚ÇÇ d‚ÇÇ‚â§d‚ÇÉ)
‚â§·µâ-trans []              []              = []
‚â§·µâ-trans (d‚ÇÅ‚â§d‚ÇÇ ‚à∑ d‚ÇÅ‚â§d‚ÇÉ) (d‚ÇÇ‚â§d‚ÇÉ ‚à∑ d‚ÇÇ‚â§d‚ÇÑ) = ‚â§·µâ-trans d‚ÇÅ‚â§d‚ÇÇ d‚ÇÇ‚â§d‚ÇÉ ‚à∑ ‚â§·µâ-trans d‚ÇÅ‚â§d‚ÇÉ d‚ÇÇ‚â§d‚ÇÑ

‚â§·µâ-isPreorder : ‚àÄ {v} ‚Üí IsPreorder _‚â°_ ‚ü¶ Œ± ‚üß[ v ‚âª_‚â§·µâ_]
‚â§·µâ-isPreorder = record
  { isEquivalence = ‚â°.isEquivalence
  ; reflexive     = Œª{ refl ‚Üí ‚â§·µâ-refl }
  ; trans         = ‚â§·µâ-trans
  }

‚â§·µâ-antisym : ‚àÄ {v} ‚Üí Antisymmetric _‚â°_ ‚ü¶ Œ± ‚üß[ v ‚âª_‚â§·µâ_]
‚â§·µâ-antisym false               false               = refl
‚â§·µâ-antisym true                true                = refl
‚â§·µâ-antisym undefined           undefined           = refl
‚â§·µâ-antisym (thunk d‚ÇÅ‚ÇÅ‚â§d‚ÇÇ‚ÇÅ)     (thunk d‚ÇÇ‚ÇÅ‚â§d‚ÇÅ‚ÇÅ)     = cong thunk (‚â§·µâ-antisym d‚ÇÅ‚ÇÅ‚â§d‚ÇÇ‚ÇÅ d‚ÇÇ‚ÇÅ‚â§d‚ÇÅ‚ÇÅ)
‚â§·µâ-antisym []                  []                  = refl
‚â§·µâ-antisym (d‚ÇÅ‚ÇÅ‚â§d‚ÇÇ‚ÇÅ ‚à∑ d‚ÇÅ‚ÇÇ‚â§d‚ÇÇ‚ÇÇ) (d‚ÇÇ‚ÇÅ‚â§d‚ÇÉ‚ÇÅ ‚à∑ d‚ÇÇ‚ÇÇ‚â§d‚ÇÉ‚ÇÇ) = cong‚ÇÇ _‚à∑_ (‚â§·µâ-antisym d‚ÇÅ‚ÇÅ‚â§d‚ÇÇ‚ÇÅ d‚ÇÇ‚ÇÅ‚â§d‚ÇÉ‚ÇÅ) (‚â§·µâ-antisym d‚ÇÅ‚ÇÇ‚â§d‚ÇÇ‚ÇÇ d‚ÇÇ‚ÇÇ‚â§d‚ÇÉ‚ÇÇ)

‚â§·µâ-isPartialOrder : ‚àÄ {v} ‚Üí IsPartialOrder _‚â°_ ‚ü¶ Œ± ‚üß[ v ‚âª_‚â§·µâ_]
‚â§·µâ-isPartialOrder = record
  { isPreorder = ‚â§·µâ-isPreorder
  ; antisym    = ‚â§·µâ-antisym
  }

d‚ÇÅ‚â§·µâd‚ÇÅ‚äî·µâd‚ÇÇ : ‚àÄ {v} d‚ÇÅ d‚ÇÇ ‚Üí ‚ü¶ Œ± ‚üß[ v ‚âª d‚ÇÅ ‚â§·µâ d‚ÇÅ ‚äî·µâ d‚ÇÇ ]
d‚ÇÅ‚â§·µâd‚ÇÅ‚äî·µâd‚ÇÇ false false = false
d‚ÇÅ‚â§·µâd‚ÇÅ‚äî·µâd‚ÇÇ true true = true
d‚ÇÅ‚â§·µâd‚ÇÅ‚äî·µâd‚ÇÇ (thunk d‚ÇÅ‚ÇÅ) (thunk d‚ÇÇ‚ÇÅ) = thunk (d‚ÇÅ‚â§·µâd‚ÇÅ‚äî·µâd‚ÇÇ d‚ÇÅ‚ÇÅ d‚ÇÇ‚ÇÅ)
d‚ÇÅ‚â§·µâd‚ÇÅ‚äî·µâd‚ÇÇ (thunk d‚ÇÅ‚ÇÅ) undefined   = ‚â§·µâ-refl
d‚ÇÅ‚â§·µâd‚ÇÅ‚äî·µâd‚ÇÇ undefined   (thunk d‚ÇÇ‚ÇÅ) = undefined
d‚ÇÅ‚â§·µâd‚ÇÅ‚äî·µâd‚ÇÇ undefined   undefined   = undefined
d‚ÇÅ‚â§·µâd‚ÇÅ‚äî·µâd‚ÇÇ []          []          = []
d‚ÇÅ‚â§·µâd‚ÇÅ‚äî·µâd‚ÇÇ (d‚ÇÅ‚ÇÅ ‚à∑ d‚ÇÅ‚ÇÇ) (d‚ÇÇ‚ÇÅ ‚à∑ d‚ÇÇ‚ÇÇ) = d‚ÇÅ‚â§·µâd‚ÇÅ‚äî·µâd‚ÇÇ d‚ÇÅ‚ÇÅ d‚ÇÇ‚ÇÅ ‚à∑ d‚ÇÅ‚â§·µâd‚ÇÅ‚äî·µâd‚ÇÇ d‚ÇÅ‚ÇÇ d‚ÇÇ‚ÇÇ

d‚ÇÇ‚â§·µâd‚ÇÅ‚äî·µâd‚ÇÇ : ‚àÄ {v} d‚ÇÅ d‚ÇÇ ‚Üí ‚ü¶ Œ± ‚üß[ v ‚âª d‚ÇÇ ‚â§·µâ d‚ÇÅ ‚äî·µâ d‚ÇÇ ]
d‚ÇÇ‚â§·µâd‚ÇÅ‚äî·µâd‚ÇÇ false       false       = false
d‚ÇÇ‚â§·µâd‚ÇÅ‚äî·µâd‚ÇÇ true        true        = true
d‚ÇÇ‚â§·µâd‚ÇÅ‚äî·µâd‚ÇÇ (thunk d‚ÇÅ‚ÇÅ) (thunk d‚ÇÇ‚ÇÅ) = thunk (d‚ÇÇ‚â§·µâd‚ÇÅ‚äî·µâd‚ÇÇ d‚ÇÅ‚ÇÅ d‚ÇÇ‚ÇÅ)
d‚ÇÇ‚â§·µâd‚ÇÅ‚äî·µâd‚ÇÇ (thunk d‚ÇÅ‚ÇÅ) undefined   = undefined
d‚ÇÇ‚â§·µâd‚ÇÅ‚äî·µâd‚ÇÇ undefined   (thunk d‚ÇÇ‚ÇÅ) = ‚â§·µâ-refl
d‚ÇÇ‚â§·µâd‚ÇÅ‚äî·µâd‚ÇÇ undefined   undefined   = undefined
d‚ÇÇ‚â§·µâd‚ÇÅ‚äî·µâd‚ÇÇ []          []          = []
d‚ÇÇ‚â§·µâd‚ÇÅ‚äî·µâd‚ÇÇ (d‚ÇÅ‚ÇÅ ‚à∑ d‚ÇÅ‚ÇÇ) (d‚ÇÇ‚ÇÅ ‚à∑ d‚ÇÇ‚ÇÇ) = d‚ÇÇ‚â§·µâd‚ÇÅ‚äî·µâd‚ÇÇ d‚ÇÅ‚ÇÅ d‚ÇÇ‚ÇÅ ‚à∑ d‚ÇÇ‚â§·µâd‚ÇÅ‚äî·µâd‚ÇÇ d‚ÇÅ‚ÇÇ d‚ÇÇ‚ÇÇ

‚äî·µâ-least : ‚àÄ {v d‚ÇÅ d‚ÇÇ d‚ÇÉ} ‚Üí
  ‚ü¶ Œ± ‚üß[ v ‚âª d‚ÇÅ ‚â§·µâ d‚ÇÉ ] ‚Üí
  ‚ü¶ Œ± ‚üß[ v ‚âª d‚ÇÇ ‚â§·µâ d‚ÇÉ ] ‚Üí
  ‚ü¶ Œ± ‚üß[ v ‚âª d‚ÇÅ ‚äî·µâ d‚ÇÇ ‚â§·µâ d‚ÇÉ ]
‚äî·µâ-least false               false               = false
‚äî·µâ-least true                true                = true
‚äî·µâ-least undefined           undefined           = undefined
‚äî·µâ-least undefined           (thunk d‚ÇÇ‚ÇÅ‚â§d‚ÇÉ‚ÇÅ)     = thunk d‚ÇÇ‚ÇÅ‚â§d‚ÇÉ‚ÇÅ
‚äî·µâ-least (thunk d‚ÇÅ‚ÇÅ‚â§d‚ÇÇ‚ÇÅ)     undefined           = thunk d‚ÇÅ‚ÇÅ‚â§d‚ÇÇ‚ÇÅ
‚äî·µâ-least (thunk d‚ÇÅ‚ÇÅ‚â§d‚ÇÇ‚ÇÅ)     (thunk d‚ÇÇ‚ÇÅ‚â§d‚ÇÉ‚ÇÅ)     = thunk (‚äî·µâ-least d‚ÇÅ‚ÇÅ‚â§d‚ÇÇ‚ÇÅ d‚ÇÇ‚ÇÅ‚â§d‚ÇÉ‚ÇÅ)
‚äî·µâ-least []                  []                  = []
‚äî·µâ-least (d‚ÇÅ‚ÇÅ‚â§d‚ÇÇ‚ÇÅ ‚à∑ d‚ÇÅ‚ÇÇ‚â§d‚ÇÇ‚ÇÇ) (d‚ÇÇ‚ÇÅ‚â§d‚ÇÉ‚ÇÅ ‚à∑ d‚ÇÇ‚ÇÇ‚â§d‚ÇÉ‚ÇÇ) = ‚äî·µâ-least d‚ÇÅ‚ÇÅ‚â§d‚ÇÇ‚ÇÅ d‚ÇÇ‚ÇÅ‚â§d‚ÇÉ‚ÇÅ ‚à∑ ‚äî·µâ-least d‚ÇÅ‚ÇÇ‚â§d‚ÇÇ‚ÇÇ d‚ÇÇ‚ÇÇ‚â§d‚ÇÉ‚ÇÇ

‚äî·µâ-supremum : ‚àÄ {v} ‚Üí Supremum ‚ü¶ Œ± ‚üß[ v ‚âª_‚â§·µâ_] _‚äî·µâ_
‚äî·µâ-supremum d‚ÇÅ d‚ÇÇ = d‚ÇÅ‚â§·µâd‚ÇÅ‚äî·µâd‚ÇÇ d‚ÇÅ d‚ÇÇ , d‚ÇÇ‚â§·µâd‚ÇÅ‚äî·µâd‚ÇÇ d‚ÇÅ d‚ÇÇ , Œª _ ‚Üí ‚äî·µâ-least

‚â§·µâ-‚äî·µâ-isJoinSemilattice : ‚àÄ {v} ‚Üí IsJoinSemilattice _‚â°_ ‚ü¶ Œ± ‚üß[ v ‚âª_‚â§·µâ_] _‚äî·µâ_
‚â§·µâ-‚äî·µâ-isJoinSemilattice = record
  { isPartialOrder = ‚â§·µâ-isPartialOrder
  ; supremum       = ‚äî·µâ-supremum
  }

‚ä•·µâ-minimum : ‚àÄ {v} ‚Üí Minimum ‚ü¶ Œ± ‚üß[ v ‚âª_‚â§·µâ_] (‚ä•‚ü¶ Œ± ‚üß‚â∫·µâ v)
‚ä•·µâ-minimum false      = false
‚ä•·µâ-minimum true       = true
‚ä•·µâ-minimum (thunk d‚ÇÅ) = undefined
‚ä•·µâ-minimum undefined  = undefined
‚ä•·µâ-minimum []         = []
‚ä•·µâ-minimum (d‚ÇÅ ‚à∑ d‚ÇÇ)  = undefined ‚à∑ undefined

‚â§·µâ-‚äî·µâ-‚ä•·µâ-isBoundedJoinSemilattice : ‚àÄ {v} ‚Üí IsBoundedJoinSemilattice _‚â°_ ‚ü¶ Œ± ‚üß[ v ‚âª_‚â§·µâ_] _‚äî·µâ_ (‚ä•‚ü¶ Œ± ‚üß‚â∫·µâ v)
‚â§·µâ-‚äî·µâ-‚ä•·µâ-isBoundedJoinSemilattice = record
  { isJoinSemilattice = ‚â§·µâ-‚äî·µâ-isJoinSemilattice
  ; minimum           = ‚ä•·µâ-minimum
  }

---------------------------------------
-- Ditto the above, but for contexts --
---------------------------------------

‚â§·∂ú-‚äî·∂ú-‚ä•·∂ú-isBoundedJoinSemilattice : IsBoundedJoinSemilattice _‚â°_ ‚ü¶ Œì ‚üß[ Œ≥ ‚âª_‚â§·∂ú_] _‚äî·∂ú_ (‚ä•‚ü¶ Œì ‚üß‚â∫·∂ú Œ≥)
‚â§·∂ú-‚äî·∂ú-‚ä•·∂ú-isBoundedJoinSemilattice = AllPointwise.isBoundedJoinSemilattice ‚â§·µâ-‚äî·µâ-‚ä•·µâ-isBoundedJoinSemilattice

‚ä•·∂ú-minimum : Minimum ‚ü¶ Œì ‚üß[ Œ≥ ‚âª_‚â§·∂ú_] (‚ä•‚ü¶ Œì ‚üß‚â∫·∂ú Œ≥)
‚ä•·∂ú-minimum = ‚â§·∂ú-‚äî·∂ú-‚ä•·∂ú-isBoundedJoinSemilattice .IsBoundedJoinSemilattice.minimum

‚â§·∂ú-‚äî·∂ú-isJoinSemilattice : ‚àÄ {Œ≥} ‚Üí IsJoinSemilattice _‚â°_ ‚ü¶ Œì ‚üß[ Œ≥ ‚âª_‚â§·∂ú_] _‚äî·∂ú_
‚â§·∂ú-‚äî·∂ú-isJoinSemilattice =
  ‚â§·∂ú-‚äî·∂ú-‚ä•·∂ú-isBoundedJoinSemilattice .IsBoundedJoinSemilattice.isJoinSemilattice

‚â§·∂ú-‚äî·∂ú-JoinSemilattice : ùîº.‚ü¶ Œì ‚üß·∂ú ‚Üí JoinSemilattice _ _ _
‚â§·∂ú-‚äî·∂ú-JoinSemilattice Œ≥ = record
  { Carrier           = ‚â∫·∂ú Œ≥
  ; _‚âà_               = _‚â°_
  ; _‚â§_               = _‚â§·∂ú_
  ; _‚à®_               = _‚äî·∂ú_
  ; isJoinSemilattice = ‚â§·∂ú-‚äî·∂ú-isJoinSemilattice
  }

Œ¥‚ÇÅ‚â§Œ¥‚ÇÅ‚äîŒ¥‚ÇÇ : (Œ¥‚ÇÅ Œ¥‚ÇÇ : ‚ü¶ Œì ‚üß‚â∫·∂ú Œ≥) ‚Üí Œ¥‚ÇÅ ‚â§·∂ú Œ¥‚ÇÅ ‚äî·∂ú Œ¥‚ÇÇ
Œ¥‚ÇÅ‚â§Œ¥‚ÇÅ‚äîŒ¥‚ÇÇ Œ¥‚ÇÅ Œ¥‚ÇÇ = ‚â§·∂ú-‚äî·∂ú-isJoinSemilattice .IsJoinSemilattice.supremum Œ¥‚ÇÅ Œ¥‚ÇÇ .proj‚ÇÅ

Œ¥‚ÇÇ‚â§Œ¥‚ÇÅ‚äîŒ¥‚ÇÇ : (Œ¥‚ÇÅ Œ¥‚ÇÇ : ‚ü¶ Œì ‚üß‚â∫·∂ú Œ≥) ‚Üí Œ¥‚ÇÇ ‚â§·∂ú Œ¥‚ÇÅ ‚äî·∂ú Œ¥‚ÇÇ
Œ¥‚ÇÇ‚â§Œ¥‚ÇÅ‚äîŒ¥‚ÇÇ Œ¥‚ÇÅ Œ¥‚ÇÇ = ‚â§·∂ú-‚äî·∂ú-isJoinSemilattice .IsJoinSemilattice.supremum Œ¥‚ÇÅ Œ¥‚ÇÇ .proj‚ÇÇ .proj‚ÇÅ

‚äî·∂ú-monotonic : _‚äî·∂ú_ Preserves‚ÇÇ ‚ü¶ Œì ‚üß[ Œ≥ ‚âª_‚â§·∂ú_] ‚ü∂ ‚ü¶ Œì ‚üß[ Œ≥ ‚âª_‚â§·∂ú_] ‚ü∂ ‚ü¶ Œì ‚üß[ Œ≥ ‚âª_‚â§·∂ú_]
‚äî·∂ú-monotonic = Relation.Binary.Lattice.Properties.JoinSemilattice.‚à®-monotonic (‚â§·∂ú-‚äî·∂ú-JoinSemilattice _)

‚â§·∂ú-‚äî·∂ú-isPartialOrder : IsPartialOrder _‚â°_ ‚ü¶ Œì ‚üß[ Œ≥ ‚âª_‚â§·∂ú_]
‚â§·∂ú-‚äî·∂ú-isPartialOrder = ‚â§·∂ú-‚äî·∂ú-isJoinSemilattice .IsJoinSemilattice.isPartialOrder

‚â§·∂ú-‚äî·∂ú-isPreorder : IsPreorder _‚â°_ ‚ü¶ Œì ‚üß[ Œ≥ ‚âª_‚â§·∂ú_]
‚â§·∂ú-‚äî·∂ú-isPreorder = ‚â§·∂ú-‚äî·∂ú-isPartialOrder .IsPartialOrder.isPreorder

‚â§·∂ú-refl : Reflexive ‚ü¶ Œì ‚üß[ Œ≥ ‚âª_‚â§·∂ú_]
‚â§·∂ú-refl = ‚â§·∂ú-‚äî·∂ú-isPreorder .IsPreorder.reflexive refl

--------------------------------------------------
-- Ditto the above, but for contexts with costs --
--------------------------------------------------

‚ä•·µê-minimum : Minimum ‚ü¶ Œì ‚üß[ Œ≥ ‚âª_‚â§·µê_] (‚ä•‚ü¶ Œì ‚üß‚â∫·µê Œ≥)
‚ä•·µê-minimum {Œì = Œì} {Œ≥ = Œ≥} = √ó.minimum {_‚â§‚ÇÅ_ = ‚ü¶ Œì ‚üß[ Œ≥ ‚âª_‚â§·∂ú_]} {_‚â§‚ÇÇ_ = ‚Ñï._‚â§_} ‚ä•·∂ú-minimum (Œª _ ‚Üí z‚â§n)

‚äî·µê-monotonic : _‚äî·µê_ Preserves‚ÇÇ ‚ü¶ Œì ‚üß[ Œ≥ ‚âª_‚â§·µê_] ‚ü∂ ‚ü¶ Œì ‚üß[ Œ≥ ‚âª_‚â§·µê_] ‚ü∂ ‚ü¶ Œì ‚üß[ Œ≥ ‚âª_‚â§·µê_]
‚äî·µê-monotonic {Œì = Œì} {Œ≥ = Œ≥} = √ó.preserves‚ÇÇ {_‚àº‚ÇÅ_ = ‚ü¶ Œì ‚üß[ Œ≥ ‚âª_‚â§·∂ú_]} {_‚àº‚ÇÇ_ = ‚Ñï._‚â§_} ‚äî·∂ú-monotonic +-mono-‚â§

‚â§·µê-‚äî·µê-isPartialOrder : IsPartialOrder _‚â°_ ‚ü¶ Œì ‚üß[ Œ≥ ‚âª_‚â§·µê_]
‚â§·µê-‚äî·µê-isPartialOrder = √ó.isPartialOrder ‚â§·∂ú-‚äî·∂ú-isPartialOrder ‚Ñï.‚â§-isPartialOrder

‚â§·µê-‚äî·µê-isPreorder : IsPreorder _‚â°_ ‚ü¶ Œì ‚üß[ Œ≥ ‚âª_‚â§·µê_]
‚â§·µê-‚äî·µê-isPreorder = ‚â§·µê-‚äî·µê-isPartialOrder .IsPartialOrder.isPreorder

‚â§·µê-refl : Reflexive ‚ü¶ Œì ‚üß[ Œ≥ ‚âª_‚â§·µê_]
‚â§·µê-refl = ‚â§·µê-‚äî·µê-isPreorder .IsPreorder.reflexive refl

>>=-mono : {Œ≥‚ÇÅ : ùîº.‚ü¶ Œì‚ÇÅ ‚üß·∂ú} {Œ≥‚ÇÇ : ùîº.‚ü¶ Œì‚ÇÇ ‚üß·∂ú}
           {m‚ÇÅ m‚ÇÇ : ‚ü¶ Œì‚ÇÅ ‚üß‚â∫·µê Œ≥‚ÇÅ} {k‚ÇÅ k‚ÇÇ : ‚â∫·∂ú Œ≥‚ÇÅ ‚Üí ‚â∫·µê Œ≥‚ÇÇ}
         ‚Üí m‚ÇÅ ‚â§·µê m‚ÇÇ
         ‚Üí (‚àÄ {Œ¥‚ÇÅ Œ¥‚ÇÇ} ‚Üí Œ¥‚ÇÅ ‚â§·∂ú Œ¥‚ÇÇ ‚Üí k‚ÇÅ Œ¥‚ÇÅ ‚â§·µê k‚ÇÇ Œ¥‚ÇÇ)
         ‚Üí (m‚ÇÅ >>= k‚ÇÅ) ‚â§·µê (m‚ÇÇ >>= k‚ÇÇ)
>>=-mono (p‚ÇÅ , p‚ÇÇ) q = q p‚ÇÅ .proj‚ÇÅ , +-mono-‚â§ p‚ÇÇ (q p‚ÇÅ .proj‚ÇÇ)

>>=-monoÀ° : {Œ≥‚ÇÅ : ùîº.‚ü¶ Œì‚ÇÅ ‚üß·∂ú} {Œ≥‚ÇÇ : ùîº.‚ü¶ Œì‚ÇÇ ‚üß·∂ú}
            {m‚ÇÅ m‚ÇÇ : ‚ü¶ Œì‚ÇÅ ‚üß‚â∫·µê Œ≥‚ÇÅ}
            {k : ‚â∫·∂ú Œ≥‚ÇÅ ‚Üí ‚â∫·µê Œ≥‚ÇÇ}
          ‚Üí m‚ÇÅ ‚â§·µê m‚ÇÇ
          ‚Üí (‚àÄ {Œ¥‚ÇÅ Œ¥‚ÇÇ} ‚Üí Œ¥‚ÇÅ ‚â§·∂ú Œ¥‚ÇÇ ‚Üí k Œ¥‚ÇÅ ‚â§·µê k Œ¥‚ÇÇ)
          ‚Üí (m‚ÇÅ >>= k) ‚â§·µê (m‚ÇÇ >>= k)
>>=-monoÀ° = >>=-mono

return-mono : {Œ¥‚ÇÅ Œ¥‚ÇÇ : ‚ü¶ Œì‚ÇÅ ‚üß‚â∫·∂ú Œ≥}
            ‚Üí Œ¥‚ÇÅ ‚â§·∂ú Œ¥‚ÇÇ
            ‚Üí return Œ¥‚ÇÅ ‚â§·µê return Œ¥‚ÇÇ
return-mono Œ¥‚ÇÅ‚â§Œ¥‚ÇÇ = Œ¥‚ÇÅ‚â§Œ¥‚ÇÇ , ‚â§-refl

--------------------------------------
-- Monotonicity of demand semantics --
--------------------------------------

‚ü¶_‚üß·µâ-mono : (t : Œì ‚ä¢ Œ±)
            (Œ≥ : ùîº.‚ü¶ Œì ‚üß·∂ú)
            {d d‚Ä≤ : ‚ü¶ Œ± ‚üß‚â∫·µâ ùîº.‚ü¶ t ‚üß·µâ Œ≥}
          ‚Üí d ‚â§·µâ d‚Ä≤
          ‚Üí ‚ü¶ t ‚üß·µâ Œ≥ d ‚â§·µê ‚ü¶ t ‚üß·µâ Œ≥ d‚Ä≤

‚ü¶if_,_‚üß·µâ-mono : (t‚ÇÇ t‚ÇÉ : Œì ‚ä¢ Œ±)
                (Œ≥ : ùîº.‚ü¶ Œì ‚üß·∂ú)
                (v : Bool)
                {d‚ÇÇ‚ÇÉ d‚ÇÇ‚ÇÉ‚Ä≤ : ‚ü¶ Œ± ‚üß‚â∫·µâ ùîº.‚ü¶if t‚ÇÇ , t‚ÇÉ ‚üß·µâ Œ≥ v}
              ‚Üí d‚ÇÇ‚ÇÉ ‚â§·µâ d‚ÇÇ‚ÇÉ‚Ä≤
              ‚Üí ‚ü¶if t‚ÇÇ , t‚ÇÉ ‚üß·µâ Œ≥ v d‚ÇÇ‚ÇÉ ‚â§·µê ‚ü¶if t‚ÇÇ , t‚ÇÉ ‚üß·µâ Œ≥ v d‚ÇÇ‚ÇÉ‚Ä≤

‚ü¶foldr_,_‚üß·µâ-mono : (t‚ÇÅ : Œì ‚∏¥ `T Œ±‚ÇÅ ‚∏¥ `T Œ±‚ÇÇ ‚ä¢ Œ±‚ÇÇ)
                   (t‚ÇÇ : Œì ‚ä¢ Œ±‚ÇÇ)
                   (Œ≥ : ùîº.‚ü¶ Œì ‚üß·∂ú)
                   (vs : List ùîº.‚ü¶ Œ±‚ÇÅ ‚üß·µó)
                   {d‚ÇÅ‚ÇÇ d‚ÇÅ‚ÇÇ‚Ä≤ : ‚ü¶ Œ±‚ÇÇ ‚üß‚â∫·µâ ùîº.‚ü¶foldr t‚ÇÅ , t‚ÇÇ ‚üß·µâ Œ≥ vs}
                 ‚Üí d‚ÇÅ‚ÇÇ ‚â§·µâ d‚ÇÅ‚ÇÇ‚Ä≤
                 ‚Üí ‚ü¶foldr t‚ÇÅ , t‚ÇÇ ‚üß·µâ Œ≥ vs d‚ÇÅ‚ÇÇ ‚â§·µê ‚ü¶foldr t‚ÇÅ , t‚ÇÇ ‚üß·µâ Œ≥ vs d‚ÇÅ‚ÇÇ‚Ä≤

‚ü¶ ` x                      ‚üß·µâ-mono Œ≥ d‚â§d‚Ä≤                =
  return-mono (AllPointwise.updateAt (‚àà·¥∏‚áílookup‚àà·¥∏toList x) (const d‚â§d‚Ä≤) ‚â§·∂ú-refl)
‚ü¶ `let t‚ÇÅ `in t‚ÇÇ           ‚üß·µâ-mono Œ≥ d‚ÇÇ‚â§d‚ÇÇ‚Ä≤              =
  >>=-monoÀ°
    {k = ‚ü¶let-step‚ÇÇ t‚ÇÅ ‚üß·µâ Œ≥}
    (‚ü¶ t‚ÇÇ ‚üß·µâ-mono (Œ≥ ‚∏¥ ùîº.‚ü¶ t‚ÇÅ ‚üß·µâ Œ≥) d‚ÇÇ‚â§d‚ÇÇ‚Ä≤)
    (Œª{ (Œ¥‚ÇÅ‚â§Œ¥‚ÇÅ‚Ä≤ ‚∏¥ d‚ÇÅ‚â§d‚ÇÅ‚Ä≤) ‚Üí
      >>=-mono
        (‚ü¶ t‚ÇÅ ‚üß·µâ-mono Œ≥ d‚ÇÅ‚â§d‚ÇÅ‚Ä≤)
        (Œª Œ¥‚ÇÇ‚â§Œ¥‚ÇÇ‚Ä≤ ‚Üí return-mono (‚äî·∂ú-monotonic Œ¥‚ÇÅ‚â§Œ¥‚ÇÅ‚Ä≤ Œ¥‚ÇÇ‚â§Œ¥‚ÇÇ‚Ä≤)) })
‚ü¶ `false                   ‚üß·µâ-mono Œ≥ d‚â§d‚Ä≤                = ‚â§·µê-refl
‚ü¶ `true                    ‚üß·µâ-mono Œ≥ d‚â§d‚Ä≤                = ‚â§·µê-refl
‚ü¶ `if t‚ÇÅ `then t‚ÇÇ `else t‚ÇÉ ‚üß·µâ-mono Œ≥ d‚ÇÇ‚ÇÉ‚â§d‚ÇÇ‚ÇÉ‚Ä≤            =
  >>=-monoÀ°
    {k = ‚ü¶if-step‚ÇÇ t‚ÇÅ ‚üß·µâ Œ≥}
    (‚ü¶if t‚ÇÇ , t‚ÇÉ ‚üß·µâ-mono Œ≥ (ùîº.‚ü¶ t‚ÇÅ ‚üß·µâ Œ≥) d‚ÇÇ‚ÇÉ‚â§d‚ÇÇ‚ÇÉ‚Ä≤)
    (Œª{ (Œ¥‚ÇÅ‚â§Œ¥‚ÇÅ‚Ä≤ ‚∏¥ d‚ÇÅ‚â§d‚ÇÅ‚Ä≤) ‚Üí
      >>=-mono
        (‚ü¶ t‚ÇÅ ‚üß·µâ-mono Œ≥ d‚ÇÅ‚â§d‚ÇÅ‚Ä≤)
        (Œª Œ¥‚ÇÇ‚â§Œ¥‚ÇÇ‚Ä≤ ‚Üí return-mono (‚äî·∂ú-monotonic Œ¥‚ÇÅ‚â§Œ¥‚ÇÅ‚Ä≤ Œ¥‚ÇÇ‚â§Œ¥‚ÇÇ‚Ä≤) )})
‚ü¶ `[]                      ‚üß·µâ-mono Œ≥ d‚â§d‚Ä≤                = ‚â§·µê-refl
‚ü¶ t‚ÇÅ `‚à∑ t‚ÇÇ                 ‚üß·µâ-mono Œ≥ (d‚ÇÅ‚ÇÅ‚â§d‚ÇÇ‚ÇÅ ‚à∑ d‚ÇÅ‚ÇÇ‚â§d‚ÇÇ‚ÇÇ) =
  ‚äî·µê-monotonic (‚ü¶ t‚ÇÅ ‚üß·µâ-mono Œ≥ d‚ÇÅ‚ÇÅ‚â§d‚ÇÇ‚ÇÅ) (‚ü¶ t‚ÇÇ ‚üß·µâ-mono Œ≥ d‚ÇÅ‚ÇÇ‚â§d‚ÇÇ‚ÇÇ)
‚ü¶ `foldr t‚ÇÅ t‚ÇÇ t‚ÇÉ          ‚üß·µâ-mono Œ≥ d‚ÇÅ‚ÇÇ‚â§d‚ÇÅ‚ÇÇ‚Ä≤            =
  >>=-monoÀ°
    {k = ‚ü¶foldr-step‚ÇÇ t‚ÇÉ ‚üß·µâ Œ≥}
    (‚ü¶foldr t‚ÇÅ , t‚ÇÇ ‚üß·µâ-mono Œ≥ (ùîº.‚ü¶ t‚ÇÉ ‚üß·µâ Œ≥) d‚ÇÅ‚ÇÇ‚â§d‚ÇÅ‚ÇÇ‚Ä≤)
    (Œª{ (Œ¥‚ÇÅ‚â§Œ¥‚ÇÅ‚Ä≤ ‚∏¥ d‚ÇÉ‚â§d‚ÇÉ‚Ä≤) ‚Üí
      >>=-mono
        (‚ü¶ t‚ÇÉ ‚üß·µâ-mono Œ≥ d‚ÇÉ‚â§d‚ÇÉ‚Ä≤)
        (Œª Œ¥‚ÇÇ‚â§Œ¥‚ÇÇ‚Ä≤ ‚Üí return-mono (‚äî·∂ú-monotonic Œ¥‚ÇÅ‚â§Œ¥‚ÇÅ‚Ä≤ Œ¥‚ÇÇ‚â§Œ¥‚ÇÇ‚Ä≤)) })
‚ü¶ `tick t‚ÇÅ                 ‚üß·µâ-mono Œ≥ d‚ÇÅ‚â§d‚ÇÅ‚Ä≤              =
  let (Œ¥‚â§Œ¥‚Ä≤ , n‚â§n‚Ä≤) = ‚ü¶ t‚ÇÅ ‚üß·µâ-mono Œ≥ d‚ÇÅ‚â§d‚ÇÅ‚Ä≤
  in Œ¥‚â§Œ¥‚Ä≤ , s‚â§s n‚â§n‚Ä≤
‚ü¶ `lazy t‚ÇÅ                 ‚üß·µâ-mono Œ≥ undefined           = ‚ä•·µê-minimum _
‚ü¶ `lazy t‚ÇÅ                 ‚üß·µâ-mono Œ≥ (thunk d‚ÇÅ‚â§d‚ÇÅ‚Ä≤)      = ‚ü¶ t‚ÇÅ ‚üß·µâ-mono Œ≥ d‚ÇÅ‚â§d‚ÇÅ‚Ä≤
‚ü¶ `force t‚ÇÅ                ‚üß·µâ-mono Œ≥ d‚â§d‚Ä≤                = ‚ü¶ t‚ÇÅ ‚üß·µâ-mono Œ≥ (thunk d‚â§d‚Ä≤)

‚ü¶if t‚ÇÇ , t‚ÇÉ ‚üß·µâ-mono Œ≥ false d‚ÇÇ‚ÇÉ‚â§d‚ÇÇ‚ÇÉ‚Ä≤ =
  >>=-mono
    (‚ü¶ t‚ÇÉ ‚üß·µâ-mono Œ≥ d‚ÇÇ‚ÇÉ‚â§d‚ÇÇ‚ÇÉ‚Ä≤)
    (Œª Œ¥‚â§Œ¥‚Ä≤ ‚Üí return-mono (Œ¥‚â§Œ¥‚Ä≤ ‚∏¥ false))
‚ü¶if t‚ÇÇ , t‚ÇÉ ‚üß·µâ-mono Œ≥ true d‚ÇÇ‚ÇÉ‚â§d‚ÇÇ‚ÇÉ‚Ä≤  =
  >>=-mono
    (‚ü¶ t‚ÇÇ ‚üß·µâ-mono Œ≥ d‚ÇÇ‚ÇÉ‚â§d‚ÇÇ‚ÇÉ‚Ä≤)
    (Œª Œ¥‚â§Œ¥‚Ä≤ ‚Üí return-mono (Œ¥‚â§Œ¥‚Ä≤ ‚∏¥ true))

‚ü¶foldr‚Ä≤_,_‚üß·µâ-mono : (t‚ÇÅ : Œì ‚∏¥ `T Œ±‚ÇÅ ‚∏¥ `T Œ±‚ÇÇ ‚ä¢ Œ±‚ÇÇ)
                    (t‚ÇÇ : Œì ‚ä¢ Œ±‚ÇÇ)
                    (Œ≥ : ùîº.‚ü¶ Œì ‚üß·∂ú)
                    (vs : List ùîº.‚ü¶ Œ±‚ÇÅ ‚üß·µó)
                    {d‚ÇÅ d‚ÇÅ‚Ä≤ : ‚ü¶ `T Œ±‚ÇÇ ‚üß‚â∫·µâ ùîº.‚ü¶foldr t‚ÇÅ , t‚ÇÇ ‚üß·µâ Œ≥ vs}
                  ‚Üí d‚ÇÅ ‚â§·µâ d‚ÇÅ‚Ä≤
                  ‚Üí ‚ü¶foldr‚Ä≤ t‚ÇÅ , t‚ÇÇ ‚üß·µâ Œ≥ vs d‚ÇÅ ‚â§·µê ‚ü¶foldr‚Ä≤ t‚ÇÅ , t‚ÇÇ ‚üß·µâ Œ≥ vs d‚ÇÅ‚Ä≤
‚ü¶foldr‚Ä≤ t‚ÇÅ , t‚ÇÇ ‚üß·µâ-mono Œ≥ vs undefined      = ‚ä•·µê-minimum _
‚ü¶foldr‚Ä≤ t‚ÇÅ , t‚ÇÇ ‚üß·µâ-mono Œ≥ vs (thunk d‚ÇÅ‚â§d‚ÇÅ‚Ä≤) =
  >>=-monoÀ°
    {k = ‚ü¶foldr‚Ä≤‚ÇÇ‚ÇÇ‚üß Œ≥ vs}
    (‚ü¶foldr t‚ÇÅ , t‚ÇÇ ‚üß·µâ-mono Œ≥ vs d‚ÇÅ‚â§d‚ÇÅ‚Ä≤)
    (Œª{ (Œ¥‚â§Œ¥‚Ä≤ ‚∏¥ d‚ÇÇ‚â§d‚ÇÇ‚Ä≤) ‚Üí return-mono (Œ¥‚â§Œ¥‚Ä≤ ‚∏¥ thunk d‚ÇÇ‚â§d‚ÇÇ‚Ä≤) })

‚ü¶foldr t‚ÇÅ , t‚ÇÇ ‚üß·µâ-mono Œ≥ []       d‚ÇÅ‚ÇÇ‚â§d‚ÇÅ‚ÇÇ‚Ä≤ =
  >>=-monoÀ°
    (‚ü¶ t‚ÇÇ ‚üß·µâ-mono Œ≥ d‚ÇÅ‚ÇÇ‚â§d‚ÇÅ‚ÇÇ‚Ä≤)
    (Œª Œ¥‚â§Œ¥‚Ä≤ ‚Üí return-mono (Œ¥‚â§Œ¥‚Ä≤ ‚∏¥ []))
‚ü¶foldr t‚ÇÅ , t‚ÇÇ ‚üß·µâ-mono Œ≥ (v ‚à∑ vs) d‚ÇÅ‚ÇÇ‚â§d‚ÇÅ‚ÇÇ‚Ä≤ =
  >>=-monoÀ°
    {k = ‚ü¶foldr‚ÇÇ‚ÇÇ t‚ÇÅ , t‚ÇÇ ‚üß·µâ Œ≥ v vs}
    (‚ü¶ t‚ÇÅ ‚üß·µâ-mono (Œ≥ ‚∏¥ v ‚∏¥ ùîº.‚ü¶foldr t‚ÇÅ , t‚ÇÇ ‚üß·µâ Œ≥ vs) d‚ÇÅ‚ÇÇ‚â§d‚ÇÅ‚ÇÇ‚Ä≤)
    (Œª{ (Œ¥‚ÇÅ‚â§Œ¥‚ÇÅ‚Ä≤ ‚∏¥ d‚ÇÇ‚â§d‚ÇÇ‚Ä≤ ‚∏¥ d‚ÇÉ‚â§d‚ÇÉ‚Ä≤) ‚Üí
      >>=-mono
        {k‚ÇÅ = ‚ü¶foldr‚ÇÇ‚ÇÉ‚üß·µâ Œ≥ v vs _ _}
        {k‚ÇÇ = ‚ü¶foldr‚ÇÇ‚ÇÉ‚üß·µâ Œ≥ v vs _ _}
        (‚ü¶foldr‚Ä≤ t‚ÇÅ , t‚ÇÇ ‚üß·µâ-mono Œ≥ vs d‚ÇÉ‚â§d‚ÇÉ‚Ä≤)
        (Œª{ (Œ¥‚ÇÇ‚â§Œ¥‚ÇÇ‚Ä≤ ‚∏¥ d‚ÇÑ‚â§d‚ÇÑ‚Ä≤) ‚Üí return-mono (‚äî·∂ú-monotonic Œ¥‚ÇÅ‚â§Œ¥‚ÇÅ‚Ä≤ Œ¥‚ÇÇ‚â§Œ¥‚ÇÇ‚Ä≤ ‚∏¥ (d‚ÇÇ‚â§d‚ÇÇ‚Ä≤ ‚à∑ d‚ÇÑ‚â§d‚ÇÑ‚Ä≤)) }) })
